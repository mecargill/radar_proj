
fmcw_manager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004588  08004588  00005588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a8  080045a8  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080045a8  080045a8  000055a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b0  080045b0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045b4  080045b4  000055b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080045b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003224  20000010  080045c8  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003234  080045c8  00006234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133a8  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003169  00000000  00000000  000193e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9d  00000000  00000000  0001d6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242c6  00000000  00000000  0001e48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017476  00000000  00000000  00042753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd4b4  00000000  00000000  00059bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013707d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c0  00000000  00000000  001370c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0013b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004570 	.word	0x08004570

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08004570 	.word	0x08004570

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000536:	463b      	mov	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000544:	4a21      	ldr	r2, [pc, #132]	@ (80005cc <MX_ADC1_Init+0x9c>)
 8000546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000548:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0x98>)
 800054a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800054e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000550:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000556:	4b1c      	ldr	r3, [pc, #112]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800055c:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <MX_ADC1_Init+0x98>)
 800055e:	2201      	movs	r2, #1
 8000560:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000562:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056a:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0x98>)
 800056c:	2200      	movs	r2, #0
 800056e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000570:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000572:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <MX_ADC1_Init+0xa0>)
 8000574:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000576:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <MX_ADC1_Init+0x98>)
 800057e:	2201      	movs	r2, #1
 8000580:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000582:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000584:	2201      	movs	r2, #1
 8000586:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <MX_ADC1_Init+0x98>)
 800058c:	2201      	movs	r2, #1
 800058e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000592:	f000 fe2b 	bl	80011ec <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800059c:	f000 fb12 	bl	8000bc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80005a8:	2303      	movs	r3, #3
 80005aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0x98>)
 80005b2:	f000 ff7d 	bl	80014b0 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005bc:	f000 fb02 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000002c 	.word	0x2000002c
 80005cc:	40012000 	.word	0x40012000
 80005d0:	0f000001 	.word	0x0f000001

080005d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a2f      	ldr	r2, [pc, #188]	@ (80006b0 <HAL_ADC_MspInit+0xdc>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d157      	bne.n	80006a6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b2e      	ldr	r3, [pc, #184]	@ (80006b4 <HAL_ADC_MspInit+0xe0>)
 80005fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005fe:	4a2d      	ldr	r2, [pc, #180]	@ (80006b4 <HAL_ADC_MspInit+0xe0>)
 8000600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000604:	6453      	str	r3, [r2, #68]	@ 0x44
 8000606:	4b2b      	ldr	r3, [pc, #172]	@ (80006b4 <HAL_ADC_MspInit+0xe0>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800060a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <HAL_ADC_MspInit+0xe0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a26      	ldr	r2, [pc, #152]	@ (80006b4 <HAL_ADC_MspInit+0xe0>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b24      	ldr	r3, [pc, #144]	@ (80006b4 <HAL_ADC_MspInit+0xe0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000632:	2303      	movs	r3, #3
 8000634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	481d      	ldr	r0, [pc, #116]	@ (80006b8 <HAL_ADC_MspInit+0xe4>)
 8000642:	f002 f84b 	bl	80026dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000646:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 8000648:	4a1d      	ldr	r2, [pc, #116]	@ (80006c0 <HAL_ADC_MspInit+0xec>)
 800064a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800065e:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 8000660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000664:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000666:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 8000668:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800066c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800066e:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 8000670:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000674:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 8000678:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800067c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000684:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800068a:	480c      	ldr	r0, [pc, #48]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 800068c:	f001 fcb6 	bl	8001ffc <HAL_DMA_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000696:	f000 fa95 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a07      	ldr	r2, [pc, #28]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 800069e:	639a      	str	r2, [r3, #56]	@ 0x38
 80006a0:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <HAL_ADC_MspInit+0xe8>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	@ 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40012000 	.word	0x40012000
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020000 	.word	0x40020000
 80006bc:	20000074 	.word	0x20000074
 80006c0:	40026410 	.word	0x40026410

080006c4 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ca:	463b      	mov	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_DAC_Init+0x4c>)
 80006d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000714 <MX_DAC_Init+0x50>)
 80006d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006d8:	480d      	ldr	r0, [pc, #52]	@ (8000710 <MX_DAC_Init+0x4c>)
 80006da:	f001 faaa 	bl	8001c32 <HAL_DAC_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006e4:	f000 fa6e 	bl	8000bc4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80006e8:	2304      	movs	r3, #4
 80006ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	@ (8000710 <MX_DAC_Init+0x4c>)
 80006f8:	f001 fb9c 	bl	8001e34 <HAL_DAC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000702:	f000 fa5f 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000d4 	.word	0x200000d4
 8000714:	40007400 	.word	0x40007400

08000718 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	@ 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a2f      	ldr	r2, [pc, #188]	@ (80007f4 <HAL_DAC_MspInit+0xdc>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d158      	bne.n	80007ec <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b2e      	ldr	r3, [pc, #184]	@ (80007f8 <HAL_DAC_MspInit+0xe0>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000742:	4a2d      	ldr	r2, [pc, #180]	@ (80007f8 <HAL_DAC_MspInit+0xe0>)
 8000744:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000748:	6413      	str	r3, [r2, #64]	@ 0x40
 800074a:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <HAL_DAC_MspInit+0xe0>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <HAL_DAC_MspInit+0xe0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a26      	ldr	r2, [pc, #152]	@ (80007f8 <HAL_DAC_MspInit+0xe0>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <HAL_DAC_MspInit+0xe0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000772:	2310      	movs	r3, #16
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	481d      	ldr	r0, [pc, #116]	@ (80007fc <HAL_DAC_MspInit+0xe4>)
 8000786:	f001 ffa9 	bl	80026dc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 800078c:	4a1d      	ldr	r2, [pc, #116]	@ (8000804 <HAL_DAC_MspInit+0xec>)
 800078e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 8000792:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000796:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 800079a:	2240      	movs	r2, #64	@ 0x40
 800079c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 80007a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007aa:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 80007ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007b2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 80007b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007ba:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 80007be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007c2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80007d0:	480b      	ldr	r0, [pc, #44]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 80007d2:	f001 fc13 	bl	8001ffc <HAL_DMA_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80007dc:	f000 f9f2 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a07      	ldr	r2, [pc, #28]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	4a06      	ldr	r2, [pc, #24]	@ (8000800 <HAL_DAC_MspInit+0xe8>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	@ 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40007400 	.word	0x40007400
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000
 8000800:	200000e8 	.word	0x200000e8
 8000804:	40026088 	.word	0x40026088

08000808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_DMA_Init+0x78>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a1a      	ldr	r2, [pc, #104]	@ (8000880 <MX_DMA_Init+0x78>)
 8000818:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_DMA_Init+0x78>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_DMA_Init+0x78>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a13      	ldr	r2, [pc, #76]	@ (8000880 <MX_DMA_Init+0x78>)
 8000834:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_DMA_Init+0x78>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	200f      	movs	r0, #15
 800084c:	f001 f9bb 	bl	8001bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000850:	200f      	movs	r0, #15
 8000852:	f001 f9d4 	bl	8001bfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2010      	movs	r0, #16
 800085c:	f001 f9b3 	bl	8001bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000860:	2010      	movs	r0, #16
 8000862:	f001 f9cc 	bl	8001bfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2038      	movs	r0, #56	@ 0x38
 800086c:	f001 f9ab 	bl	8001bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000870:	2038      	movs	r0, #56	@ 0x38
 8000872:	f001 f9c4 	bl	8001bfe <HAL_NVIC_EnableIRQ>

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b38      	ldr	r3, [pc, #224]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a37      	ldr	r2, [pc, #220]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b35      	ldr	r3, [pc, #212]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a30      	ldr	r2, [pc, #192]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a29      	ldr	r2, [pc, #164]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b27      	ldr	r3, [pc, #156]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <MX_GPIO_Init+0xfc>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <MX_GPIO_Init+0xfc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2120      	movs	r1, #32
 800090e:	481d      	ldr	r0, [pc, #116]	@ (8000984 <MX_GPIO_Init+0x100>)
 8000910:	f002 f890 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800091a:	481b      	ldr	r0, [pc, #108]	@ (8000988 <MX_GPIO_Init+0x104>)
 800091c:	f002 f88a 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000926:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4814      	ldr	r0, [pc, #80]	@ (8000988 <MX_GPIO_Init+0x104>)
 8000938:	f001 fed0 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800093c:	2320      	movs	r3, #32
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	480c      	ldr	r0, [pc, #48]	@ (8000984 <MX_GPIO_Init+0x100>)
 8000954:	f001 fec2 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000958:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_GPIO_Init+0x104>)
 8000972:	f001 feb3 	bl	80026dc <HAL_GPIO_Init>

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	@ 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000
 8000988:	40020800 	.word	0x40020800

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	//initialize  buffers
	//sized such that a trigger under 1 MHz will let us sweep 0.4 to 2.4V in ~0.5-1ms
	for(uint16_t i = 0; i < 579*2; i++) {
 8000992:	2300      	movs	r3, #0
 8000994:	80fb      	strh	r3, [r7, #6]
 8000996:	e021      	b.n	80009dc <main+0x50>

		if(i < 579) {
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	f240 2242 	movw	r2, #578	@ 0x242
 800099e:	4293      	cmp	r3, r2
 80009a0:	d80c      	bhi.n	80009bc <main+0x30>
			tune[i] = 1241 + 3*i;
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	461a      	mov	r2, r3
 80009a6:	0052      	lsls	r2, r2, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	f202 42d9 	addw	r2, r2, #1241	@ 0x4d9
 80009b2:	b291      	uxth	r1, r2
 80009b4:	4a27      	ldr	r2, [pc, #156]	@ (8000a54 <main+0xc8>)
 80009b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009ba:	e00c      	b.n	80009d6 <main+0x4a>
		} else {
			tune[i] = 2979 - 3*(i - 579);
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	461a      	mov	r2, r3
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 80009cc:	330c      	adds	r3, #12
 80009ce:	b299      	uxth	r1, r3
 80009d0:	4b20      	ldr	r3, [pc, #128]	@ (8000a54 <main+0xc8>)
 80009d2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint16_t i = 0; i < 579*2; i++) {
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	3301      	adds	r3, #1
 80009da:	80fb      	strh	r3, [r7, #6]
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	f240 4285 	movw	r2, #1157	@ 0x485
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d9d8      	bls.n	8000998 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e6:	f000 fb6b 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 f83f 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ee:	f7ff ff49 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 80009f2:	f7ff ff09 	bl	8000808 <MX_DMA_Init>
  MX_ADC1_Init();
 80009f6:	f7ff fd9b 	bl	8000530 <MX_ADC1_Init>
  MX_SPI2_Init();
 80009fa:	f000 f8e9 	bl	8000bd0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80009fe:	f000 fac3 	bl	8000f88 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000a02:	f7ff fe5f 	bl	80006c4 <MX_DAC_Init>
  MX_TIM6_Init();
 8000a06:	f000 fa69 	bl	8000edc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  for(int i = 0; i < 12; i++) {
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	e00a      	b.n	8000a26 <main+0x9a>
  	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000a10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a14:	4810      	ldr	r0, [pc, #64]	@ (8000a58 <main+0xcc>)
 8000a16:	f002 f826 	bl	8002a66 <HAL_GPIO_TogglePin>
  	  HAL_Delay(250);
 8000a1a:	20fa      	movs	r0, #250	@ 0xfa
 8000a1c:	f000 fbc2 	bl	80011a4 <HAL_Delay>
  for(int i = 0; i < 12; i++) {
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	2b0b      	cmp	r3, #11
 8000a2a:	ddf1      	ble.n	8000a10 <main+0x84>
    }


  //buffer decays to ptr, call start adc dma on adc1
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer, PI_SPI_LENGTH*2);
 8000a2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a30:	490a      	ldr	r1, [pc, #40]	@ (8000a5c <main+0xd0>)
 8000a32:	480b      	ldr	r0, [pc, #44]	@ (8000a60 <main+0xd4>)
 8000a34:	f000 fc1e 	bl	8001274 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) tune, 579*2, DAC_ALIGN_12B_R);
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	f240 4386 	movw	r3, #1158	@ 0x486
 8000a40:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <main+0xc8>)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <main+0xd8>)
 8000a46:	f001 f917 	bl	8001c78 <HAL_DAC_Start_DMA>
  //84/118 = 0.711MHz timer
  HAL_TIM_Base_Start(&htim6);
 8000a4a:	4807      	ldr	r0, [pc, #28]	@ (8000a68 <main+0xdc>)
 8000a4c:	f003 f916 	bl	8003c7c <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <main+0xc4>
 8000a54:	20002148 	.word	0x20002148
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	20000148 	.word	0x20000148
 8000a60:	2000002c 	.word	0x2000002c
 8000a64:	200000d4 	.word	0x200000d4
 8000a68:	200031a0 	.word	0x200031a0

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b094      	sub	sp, #80	@ 0x50
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2234      	movs	r2, #52	@ 0x34
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f003 fd4c 	bl	8004518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	4b2a      	ldr	r3, [pc, #168]	@ (8000b40 <SystemClock_Config+0xd4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	4a29      	ldr	r2, [pc, #164]	@ (8000b40 <SystemClock_Config+0xd4>)
 8000a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa0:	4b27      	ldr	r3, [pc, #156]	@ (8000b40 <SystemClock_Config+0xd4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aac:	2300      	movs	r3, #0
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	4b24      	ldr	r3, [pc, #144]	@ (8000b44 <SystemClock_Config+0xd8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab8:	4a22      	ldr	r2, [pc, #136]	@ (8000b44 <SystemClock_Config+0xd8>)
 8000aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <SystemClock_Config+0xd8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ae4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ae8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aea:	2304      	movs	r3, #4
 8000aec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fb18 	bl	8003130 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b06:	f000 f85d 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 ffb8 	bl	8002a9c <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b32:	f000 f847 	bl	8000bc4 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	@ 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a08      	ldr	r2, [pc, #32]	@ (8000b78 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d109      	bne.n	8000b6e <HAL_ADC_ConvHalfCpltCallback+0x26>
    {
        // push first half of buffer to spi2
    	buffer[0] = 100*256+1;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000b5c:	f246 4201 	movw	r2, #25601	@ 0x6401
 8000b60:	801a      	strh	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*) buffer, PI_SPI_LENGTH);
 8000b62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b66:	4905      	ldr	r1, [pc, #20]	@ (8000b7c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000b68:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000b6a:	f002 fe09 	bl	8003780 <HAL_SPI_Transmit_DMA>

    }
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40012000 	.word	0x40012000
 8000b7c:	20000148 	.word	0x20000148
 8000b80:	200030e8 	.word	0x200030e8

08000b84 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a09      	ldr	r2, [pc, #36]	@ (8000bb8 <HAL_ADC_ConvCpltCallback+0x34>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d10c      	bne.n	8000bb0 <HAL_ADC_ConvCpltCallback+0x2c>
    {
        // Second half of adc_buffer is ready, push to spi2
    	halfway_pt[0] = 100*256+1;
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <HAL_ADC_ConvCpltCallback+0x38>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f246 4201 	movw	r2, #25601	@ 0x6401
 8000b9e:	801a      	strh	r2, [r3, #0]
    	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*) halfway_pt, PI_SPI_LENGTH);
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_ADC_ConvCpltCallback+0x38>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000bac:	f002 fde8 	bl	8003780 <HAL_SPI_Transmit_DMA>


  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40012000 	.word	0x40012000
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	200030e8 	.word	0x200030e8

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <Error_Handler+0x8>

08000bd0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	HAL_Delay(50);
 8000bd6:	2032      	movs	r0, #50	@ 0x32
 8000bd8:	f000 fae4 	bl	80011a4 <HAL_Delay>
	bool button_pressed = false;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	71fb      	strb	r3, [r7, #7]
	while(!button_pressed) {
 8000be0:	e00d      	b.n	8000bfe <MX_SPI2_Init+0x2e>
		button_pressed = (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET);
 8000be2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000be6:	4820      	ldr	r0, [pc, #128]	@ (8000c68 <MX_SPI2_Init+0x98>)
 8000be8:	f001 ff0c 	bl	8002a04 <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2301      	moveq	r3, #1
 8000bf4:	2300      	movne	r3, #0
 8000bf6:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(50);
 8000bf8:	2032      	movs	r0, #50	@ 0x32
 8000bfa:	f000 fad3 	bl	80011a4 <HAL_Delay>
	while(!button_pressed) {
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f083 0301 	eor.w	r3, r3, #1
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1eb      	bne.n	8000be2 <MX_SPI2_Init+0x12>
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c0c:	4a18      	ldr	r2, [pc, #96]	@ (8000c70 <MX_SPI2_Init+0xa0>)
 8000c0e:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000c10:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c1c:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c4a:	220a      	movs	r2, #10
 8000c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c4e:	4807      	ldr	r0, [pc, #28]	@ (8000c6c <MX_SPI2_Init+0x9c>)
 8000c50:	f002 fd0c 	bl	800366c <HAL_SPI_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_SPI2_Init+0x8e>
  {
    Error_Handler();
 8000c5a:	f7ff ffb3 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	200030e8 	.word	0x200030e8
 8000c70:	40003800 	.word	0x40003800

08000c74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a48      	ldr	r2, [pc, #288]	@ (8000db4 <HAL_SPI_MspInit+0x140>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	f040 808a 	bne.w	8000dac <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	4b46      	ldr	r3, [pc, #280]	@ (8000db8 <HAL_SPI_MspInit+0x144>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca0:	4a45      	ldr	r2, [pc, #276]	@ (8000db8 <HAL_SPI_MspInit+0x144>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca8:	4b43      	ldr	r3, [pc, #268]	@ (8000db8 <HAL_SPI_MspInit+0x144>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8000db8 <HAL_SPI_MspInit+0x144>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbc:	4a3e      	ldr	r2, [pc, #248]	@ (8000db8 <HAL_SPI_MspInit+0x144>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8000db8 <HAL_SPI_MspInit+0x144>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b38      	ldr	r3, [pc, #224]	@ (8000db8 <HAL_SPI_MspInit+0x144>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd8:	4a37      	ldr	r2, [pc, #220]	@ (8000db8 <HAL_SPI_MspInit+0x144>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce0:	4b35      	ldr	r3, [pc, #212]	@ (8000db8 <HAL_SPI_MspInit+0x144>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cec:	2302      	movs	r3, #2
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	482d      	ldr	r0, [pc, #180]	@ (8000dbc <HAL_SPI_MspInit+0x148>)
 8000d08:	f001 fce8 	bl	80026dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4825      	ldr	r0, [pc, #148]	@ (8000dbc <HAL_SPI_MspInit+0x148>)
 8000d28:	f001 fcd8 	bl	80026dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	481d      	ldr	r0, [pc, #116]	@ (8000dc0 <HAL_SPI_MspInit+0x14c>)
 8000d4a:	f001 fcc7 	bl	80026dc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000d50:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc8 <HAL_SPI_MspInit+0x154>)
 8000d52:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000d5c:	2240      	movs	r2, #64	@ 0x40
 8000d5e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d60:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d66:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000d68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000d70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d74:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000d78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d7c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000d92:	f001 f933 	bl	8001ffc <HAL_DMA_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8000d9c:	f7ff ff12 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000da4:	649a      	str	r2, [r3, #72]	@ 0x48
 8000da6:	4a07      	ldr	r2, [pc, #28]	@ (8000dc4 <HAL_SPI_MspInit+0x150>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	@ 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40003800 	.word	0x40003800
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020800 	.word	0x40020800
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	20003140 	.word	0x20003140
 8000dc8:	40026070 	.word	0x40026070

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	4a0f      	ldr	r2, [pc, #60]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e0a:	2007      	movs	r0, #7
 8000e0c:	f000 fed0 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <NMI_Handler+0x4>

08000e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <MemManage_Handler+0x4>

08000e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e72:	f000 f977 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <DMA1_Stream4_IRQHandler+0x10>)
 8000e82:	f001 f9c1 	bl	8002208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20003140 	.word	0x20003140

08000e90 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <DMA1_Stream5_IRQHandler+0x10>)
 8000e96:	f001 f9b7 	bl	8002208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000e8 	.word	0x200000e8

08000ea4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <DMA2_Stream0_IRQHandler+0x10>)
 8000eaa:	f001 f9ad 	bl	8002208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000074 	.word	0x20000074

08000eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	@ (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_TIM6_Init+0x60>)
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <MX_TIM6_Init+0x64>)
 8000eee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_TIM6_Init+0x60>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_TIM6_Init+0x60>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 117;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_TIM6_Init+0x60>)
 8000efe:	2275      	movs	r2, #117	@ 0x75
 8000f00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_TIM6_Init+0x60>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <MX_TIM6_Init+0x60>)
 8000f0a:	f002 fe67 	bl	8003bdc <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000f14:	f7ff fe56 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f18:	2320      	movs	r3, #32
 8000f1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_TIM6_Init+0x60>)
 8000f26:	f002 ffb7 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000f30:	f7ff fe48 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200031a0 	.word	0x200031a0
 8000f40:	40001000 	.word	0x40001000

08000f44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <HAL_TIM_Base_MspInit+0x3c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d10d      	bne.n	8000f72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_TIM_Base_MspInit+0x40>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	4a09      	ldr	r2, [pc, #36]	@ (8000f84 <HAL_TIM_Base_MspInit+0x40>)
 8000f60:	f043 0310 	orr.w	r3, r3, #16
 8000f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <HAL_TIM_Base_MspInit+0x40>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40001000 	.word	0x40001000
 8000f84:	40023800 	.word	0x40023800

08000f88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <MX_USART2_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	f002 ffe6 	bl	8003f90 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fca:	f7ff fdfb 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200031e8 	.word	0x200031e8
 8000fd8:	40004400 	.word	0x40004400

08000fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	@ (8001060 <HAL_UART_MspInit+0x84>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12b      	bne.n	8001056 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <HAL_UART_MspInit+0x88>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a17      	ldr	r2, [pc, #92]	@ (8001064 <HAL_UART_MspInit+0x88>)
 8001008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_UART_MspInit+0x88>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_UART_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <HAL_UART_MspInit+0x88>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_UART_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001036:	230c      	movs	r3, #12
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001046:	2307      	movs	r3, #7
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	@ (8001068 <HAL_UART_MspInit+0x8c>)
 8001052:	f001 fb43 	bl	80026dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	@ 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40004400 	.word	0x40004400
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001070:	f7ff ff22 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	@ (80010ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	@ (80010b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800109a:	f003 fa45 	bl	8004528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fc75 	bl	800098c <main>
  bx  lr    
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010b0:	080045b8 	.word	0x080045b8
  ldr r2, =_sbss
 80010b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010b8:	20003234 	.word	0x20003234

080010bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <HAL_Init+0x40>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <HAL_Init+0x40>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <HAL_Init+0x40>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 fd61 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff fe6a 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fd79 	bl	8001c1a <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 fd41 	bl	8001bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000004 	.word	0x20000004
 800115c:	2000000c 	.word	0x2000000c
 8001160:	20000008 	.word	0x20000008

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	2000000c 	.word	0x2000000c
 8001188:	20003230 	.word	0x20003230

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20003230 	.word	0x20003230

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000000c 	.word	0x2000000c

080011ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e033      	b.n	800126a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff f9e2 	bl	80005d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	d118      	bne.n	800125c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001232:	f023 0302 	bic.w	r3, r3, #2
 8001236:	f043 0202 	orr.w	r2, r3, #2
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fa68 	bl	8001714 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	f023 0303 	bic.w	r3, r3, #3
 8001252:	f043 0201 	orr.w	r2, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	641a      	str	r2, [r3, #64]	@ 0x40
 800125a:	e001      	b.n	8001260 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Start_DMA+0x22>
 8001292:	2302      	movs	r3, #2
 8001294:	e0eb      	b.n	800146e <HAL_ADC_Start_DMA+0x1fa>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d018      	beq.n	80012de <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0201 	orr.w	r2, r2, #1
 80012ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001478 <HAL_ADC_Start_DMA+0x204>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a6e      	ldr	r2, [pc, #440]	@ (800147c <HAL_ADC_Start_DMA+0x208>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	0c9a      	lsrs	r2, r3, #18
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80012d0:	e002      	b.n	80012d8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f9      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012ec:	d107      	bne.n	80012fe <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012fc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b01      	cmp	r3, #1
 800130a:	f040 80a3 	bne.w	8001454 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001338:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800134c:	d106      	bne.n	800135c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	f023 0206 	bic.w	r2, r3, #6
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	645a      	str	r2, [r3, #68]	@ 0x44
 800135a:	e002      	b.n	8001362 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136a:	4b45      	ldr	r3, [pc, #276]	@ (8001480 <HAL_ADC_Start_DMA+0x20c>)
 800136c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001372:	4a44      	ldr	r2, [pc, #272]	@ (8001484 <HAL_ADC_Start_DMA+0x210>)
 8001374:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137a:	4a43      	ldr	r2, [pc, #268]	@ (8001488 <HAL_ADC_Start_DMA+0x214>)
 800137c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001382:	4a42      	ldr	r2, [pc, #264]	@ (800148c <HAL_ADC_Start_DMA+0x218>)
 8001384:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800138e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800139e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013ae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	334c      	adds	r3, #76	@ 0x4c
 80013ba:	4619      	mov	r1, r3
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f000 feca 	bl	8002158 <HAL_DMA_Start_IT>
 80013c4:	4603      	mov	r3, r0
 80013c6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d12a      	bne.n	800142a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001490 <HAL_ADC_Start_DMA+0x21c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d015      	beq.n	800140a <HAL_ADC_Start_DMA+0x196>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001494 <HAL_ADC_Start_DMA+0x220>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d105      	bne.n	80013f4 <HAL_ADC_Start_DMA+0x180>
 80013e8:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <HAL_ADC_Start_DMA+0x20c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00a      	beq.n	800140a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a27      	ldr	r2, [pc, #156]	@ (8001498 <HAL_ADC_Start_DMA+0x224>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d136      	bne.n	800146c <HAL_ADC_Start_DMA+0x1f8>
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <HAL_ADC_Start_DMA+0x20c>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d130      	bne.n	800146c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d129      	bne.n	800146c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	e020      	b.n	800146c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <HAL_ADC_Start_DMA+0x21c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d11b      	bne.n	800146c <HAL_ADC_Start_DMA+0x1f8>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d114      	bne.n	800146c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	e00b      	b.n	800146c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001458:	f043 0210 	orr.w	r2, r3, #16
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800146c:	7ffb      	ldrb	r3, [r7, #31]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000004 	.word	0x20000004
 800147c:	431bde83 	.word	0x431bde83
 8001480:	40012300 	.word	0x40012300
 8001484:	0800190d 	.word	0x0800190d
 8001488:	080019c7 	.word	0x080019c7
 800148c:	080019e3 	.word	0x080019e3
 8001490:	40012000 	.word	0x40012000
 8001494:	40012100 	.word	0x40012100
 8001498:	40012200 	.word	0x40012200

0800149c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x1c>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e113      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x244>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b09      	cmp	r3, #9
 80014da:	d925      	bls.n	8001528 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68d9      	ldr	r1, [r3, #12]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	3b1e      	subs	r3, #30
 80014f2:	2207      	movs	r2, #7
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43da      	mvns	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	400a      	ands	r2, r1
 8001500:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68d9      	ldr	r1, [r3, #12]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	4603      	mov	r3, r0
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4403      	add	r3, r0
 800151a:	3b1e      	subs	r3, #30
 800151c:	409a      	lsls	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	e022      	b.n	800156e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6919      	ldr	r1, [r3, #16]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	2207      	movs	r2, #7
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	400a      	ands	r2, r1
 800154a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6919      	ldr	r1, [r3, #16]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	4603      	mov	r3, r0
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4403      	add	r3, r0
 8001564:	409a      	lsls	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b06      	cmp	r3, #6
 8001574:	d824      	bhi.n	80015c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	3b05      	subs	r3, #5
 8001588:	221f      	movs	r2, #31
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	400a      	ands	r2, r1
 8001596:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	3b05      	subs	r3, #5
 80015b2:	fa00 f203 	lsl.w	r2, r0, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80015be:	e04c      	b.n	800165a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	d824      	bhi.n	8001612 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	3b23      	subs	r3, #35	@ 0x23
 80015da:	221f      	movs	r2, #31
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43da      	mvns	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	400a      	ands	r2, r1
 80015e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b23      	subs	r3, #35	@ 0x23
 8001604:	fa00 f203 	lsl.w	r2, r0, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001610:	e023      	b.n	800165a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b41      	subs	r3, #65	@ 0x41
 8001624:	221f      	movs	r2, #31
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	400a      	ands	r2, r1
 8001632:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3b41      	subs	r3, #65	@ 0x41
 800164e:	fa00 f203 	lsl.w	r2, r0, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800165a:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <HAL_ADC_ConfigChannel+0x250>)
 800165c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a28      	ldr	r2, [pc, #160]	@ (8001704 <HAL_ADC_ConfigChannel+0x254>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d10f      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x1d8>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b12      	cmp	r3, #18
 800166e:	d10b      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1d      	ldr	r2, [pc, #116]	@ (8001704 <HAL_ADC_ConfigChannel+0x254>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12b      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x23a>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1c      	ldr	r2, [pc, #112]	@ (8001708 <HAL_ADC_ConfigChannel+0x258>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d003      	beq.n	80016a4 <HAL_ADC_ConfigChannel+0x1f4>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b11      	cmp	r3, #17
 80016a2:	d122      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a11      	ldr	r2, [pc, #68]	@ (8001708 <HAL_ADC_ConfigChannel+0x258>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d111      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_ADC_ConfigChannel+0x25c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a11      	ldr	r2, [pc, #68]	@ (8001710 <HAL_ADC_ConfigChannel+0x260>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	0c9a      	lsrs	r2, r3, #18
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016dc:	e002      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f9      	bne.n	80016de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40012300 	.word	0x40012300
 8001704:	40012000 	.word	0x40012000
 8001708:	10000012 	.word	0x10000012
 800170c:	20000004 	.word	0x20000004
 8001710:	431bde83 	.word	0x431bde83

08001714 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800171c:	4b79      	ldr	r3, [pc, #484]	@ (8001904 <ADC_Init+0x1f0>)
 800171e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	431a      	orrs	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	021a      	lsls	r2, r3, #8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800176c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800178e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6899      	ldr	r1, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a6:	4a58      	ldr	r2, [pc, #352]	@ (8001908 <ADC_Init+0x1f4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d022      	beq.n	80017f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6899      	ldr	r1, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6899      	ldr	r1, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e00f      	b.n	8001812 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001810:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0202 	bic.w	r2, r2, #2
 8001820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6899      	ldr	r1, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7e1b      	ldrb	r3, [r3, #24]
 800182c:	005a      	lsls	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d01b      	beq.n	8001878 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800184e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800185e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6859      	ldr	r1, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	3b01      	subs	r3, #1
 800186c:	035a      	lsls	r2, r3, #13
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	e007      	b.n	8001888 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001886:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001896:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	051a      	lsls	r2, r3, #20
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6899      	ldr	r1, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018ca:	025a      	lsls	r2, r3, #9
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6899      	ldr	r1, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	029a      	lsls	r2, r3, #10
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	609a      	str	r2, [r3, #8]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40012300 	.word	0x40012300
 8001908:	0f000001 	.word	0x0f000001

0800190c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001918:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001922:	2b00      	cmp	r3, #0
 8001924:	d13c      	bne.n	80019a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d12b      	bne.n	8001998 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001944:	2b00      	cmp	r3, #0
 8001946:	d127      	bne.n	8001998 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001960:	2b00      	cmp	r3, #0
 8001962:	d119      	bne.n	8001998 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0220 	bic.w	r2, r2, #32
 8001972:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff f8f3 	bl	8000b84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800199e:	e00e      	b.n	80019be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff fd75 	bl	800149c <HAL_ADC_ErrorCallback>
}
 80019b2:	e004      	b.n	80019be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff f8b7 	bl	8000b48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ee:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2240      	movs	r2, #64	@ 0x40
 80019f4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	f043 0204 	orr.w	r2, r3, #4
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7ff fd4a 	bl	800149c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	@ (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db0b      	blt.n	8001a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f003 021f 	and.w	r2, r3, #31
 8001a8c:	4907      	ldr	r1, [pc, #28]	@ (8001aac <__NVIC_EnableIRQ+0x38>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	2001      	movs	r0, #1
 8001a96:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	@ (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	@ (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	@ 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	@ 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff29 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff3e 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff8e 	bl	8001b04 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5d 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff31 	bl	8001a74 <__NVIC_EnableIRQ>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffa2 	bl	8001b6c <SysTick_Config>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e014      	b.n	8001c6e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	791b      	ldrb	r3, [r3, #4]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7fe fd5f 	bl	8000718 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
#endif /* DAC_CHANNEL2_SUPPORT */
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0a2      	b.n	8001dd6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	795b      	ldrb	r3, [r3, #5]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_DAC_Start_DMA+0x24>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e09c      	b.n	8001dd6 <HAL_DAC_Start_DMA+0x15e>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d129      	bne.n	8001d02 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	4a4b      	ldr	r2, [pc, #300]	@ (8001de0 <HAL_DAC_Start_DMA+0x168>)
 8001cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4a4a      	ldr	r2, [pc, #296]	@ (8001de4 <HAL_DAC_Start_DMA+0x16c>)
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	4a49      	ldr	r2, [pc, #292]	@ (8001de8 <HAL_DAC_Start_DMA+0x170>)
 8001cc4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001cd4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_DAC_Start_DMA+0x6c>
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d005      	beq.n	8001cee <HAL_DAC_Start_DMA+0x76>
 8001ce2:	e009      	b.n	8001cf8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3308      	adds	r3, #8
 8001cea:	613b      	str	r3, [r7, #16]
        break;
 8001cec:	e033      	b.n	8001d56 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	330c      	adds	r3, #12
 8001cf4:	613b      	str	r3, [r7, #16]
        break;
 8001cf6:	e02e      	b.n	8001d56 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	613b      	str	r3, [r7, #16]
        break;
 8001d00:	e029      	b.n	8001d56 <HAL_DAC_Start_DMA+0xde>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	4a39      	ldr	r2, [pc, #228]	@ (8001dec <HAL_DAC_Start_DMA+0x174>)
 8001d08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4a38      	ldr	r2, [pc, #224]	@ (8001df0 <HAL_DAC_Start_DMA+0x178>)
 8001d10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	4a37      	ldr	r2, [pc, #220]	@ (8001df4 <HAL_DAC_Start_DMA+0x17c>)
 8001d18:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001d28:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_DAC_Start_DMA+0xc0>
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d005      	beq.n	8001d42 <HAL_DAC_Start_DMA+0xca>
 8001d36:	e009      	b.n	8001d4c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3314      	adds	r3, #20
 8001d3e:	613b      	str	r3, [r7, #16]
        break;
 8001d40:	e009      	b.n	8001d56 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3318      	adds	r3, #24
 8001d48:	613b      	str	r3, [r7, #16]
        break;
 8001d4a:	e004      	b.n	8001d56 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	331c      	adds	r3, #28
 8001d52:	613b      	str	r3, [r7, #16]
        break;
 8001d54:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d111      	bne.n	8001d80 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6898      	ldr	r0, [r3, #8]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	f000 f9ef 	bl	8002158 <HAL_DMA_Start_IT>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	75fb      	strb	r3, [r7, #23]
 8001d7e:	e010      	b.n	8001da2 <HAL_DAC_Start_DMA+0x12a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	68d8      	ldr	r0, [r3, #12]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	f000 f9dd 	bl	8002158 <HAL_DMA_Start_IT>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6819      	ldr	r1, [r3, #0]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2201      	movs	r2, #1
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e005      	b.n	8001dd4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	f043 0204 	orr.w	r2, r3, #4
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	08001ee7 	.word	0x08001ee7
 8001de4:	08001f09 	.word	0x08001f09
 8001de8:	08001f25 	.word	0x08001f25
 8001dec:	08001f8f 	.word	0x08001f8f
 8001df0:	08001fb1 	.word	0x08001fb1
 8001df4:	08001fcd 	.word	0x08001fcd

08001df8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_DAC_ConfigChannel+0x1c>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e042      	b.n	8001eda <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	795b      	ldrb	r3, [r3, #5]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_DAC_ConfigChannel+0x2c>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e03c      	b.n	8001eda <HAL_DAC_ConfigChannel+0xa6>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6819      	ldr	r1, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	22c0      	movs	r2, #192	@ 0xc0
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	400a      	ands	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	@ 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7ff ff7f 	bl	8001df8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	711a      	strb	r2, [r3, #4]
}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f14:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7ff ff78 	bl	8001e0c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f043 0204 	orr.w	r2, r3, #4
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f7ff ff6e 	bl	8001e20 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	711a      	strb	r2, [r3, #4]
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f9a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff ffd8 	bl	8001f52 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	711a      	strb	r2, [r3, #4]
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fbc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff ffd1 	bl	8001f66 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f043 0204 	orr.w	r2, r3, #4
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff ffc7 	bl	8001f7a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	711a      	strb	r2, [r3, #4]
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff f8c0 	bl	800118c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e099      	b.n	800214c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002038:	e00f      	b.n	800205a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800203a:	f7ff f8a7 	bl	800118c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b05      	cmp	r3, #5
 8002046:	d908      	bls.n	800205a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2203      	movs	r2, #3
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e078      	b.n	800214c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e8      	bne.n	800203a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4b38      	ldr	r3, [pc, #224]	@ (8002154 <HAL_DMA_Init+0x158>)
 8002074:	4013      	ands	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d107      	bne.n	80020c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020bc:	4313      	orrs	r3, r2
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f023 0307 	bic.w	r3, r3, #7
 80020da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d117      	bne.n	800211e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00e      	beq.n	800211e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fa6f 	bl	80025e4 <DMA_CheckFifoParam>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2240      	movs	r2, #64	@ 0x40
 8002110:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800211a:	2301      	movs	r3, #1
 800211c:	e016      	b.n	800214c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa26 	bl	8002578 <DMA_CalcBaseAndBitshift>
 800212c:	4603      	mov	r3, r0
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	223f      	movs	r2, #63	@ 0x3f
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	f010803f 	.word	0xf010803f

08002158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_DMA_Start_IT+0x26>
 800217a:	2302      	movs	r3, #2
 800217c:	e040      	b.n	8002200 <HAL_DMA_Start_IT+0xa8>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d12f      	bne.n	80021f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f9b8 	bl	800251c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b0:	223f      	movs	r2, #63	@ 0x3f
 80021b2:	409a      	lsls	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0216 	orr.w	r2, r2, #22
 80021c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0208 	orr.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e005      	b.n	80021fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
 80021fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002214:	4b8e      	ldr	r3, [pc, #568]	@ (8002450 <HAL_DMA_IRQHandler+0x248>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a8e      	ldr	r2, [pc, #568]	@ (8002454 <HAL_DMA_IRQHandler+0x24c>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0a9b      	lsrs	r3, r3, #10
 8002220:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002226:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002232:	2208      	movs	r2, #8
 8002234:	409a      	lsls	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01a      	beq.n	8002274 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0204 	bic.w	r2, r2, #4
 800225a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002260:	2208      	movs	r2, #8
 8002262:	409a      	lsls	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002278:	2201      	movs	r2, #1
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d012      	beq.n	80022aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002296:	2201      	movs	r2, #1
 8002298:	409a      	lsls	r2, r3
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a2:	f043 0202 	orr.w	r2, r3, #2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ae:	2204      	movs	r2, #4
 80022b0:	409a      	lsls	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d012      	beq.n	80022e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00b      	beq.n	80022e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022cc:	2204      	movs	r2, #4
 80022ce:	409a      	lsls	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d8:	f043 0204 	orr.w	r2, r3, #4
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e4:	2210      	movs	r2, #16
 80022e6:	409a      	lsls	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d043      	beq.n	8002378 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d03c      	beq.n	8002378 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002302:	2210      	movs	r2, #16
 8002304:	409a      	lsls	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d018      	beq.n	800234a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d108      	bne.n	8002338 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d024      	beq.n	8002378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
 8002336:	e01f      	b.n	8002378 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01b      	beq.n	8002378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	4798      	blx	r3
 8002348:	e016      	b.n	8002378 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0208 	bic.w	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	2220      	movs	r2, #32
 800237e:	409a      	lsls	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 808f 	beq.w	80024a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8087 	beq.w	80024a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	2220      	movs	r2, #32
 80023a0:	409a      	lsls	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d136      	bne.n	8002420 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0216 	bic.w	r2, r2, #22
 80023c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <HAL_DMA_IRQHandler+0x1da>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0208 	bic.w	r2, r2, #8
 80023f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f6:	223f      	movs	r2, #63	@ 0x3f
 80023f8:	409a      	lsls	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002412:	2b00      	cmp	r3, #0
 8002414:	d07e      	beq.n	8002514 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	4798      	blx	r3
        }
        return;
 800241e:	e079      	b.n	8002514 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01d      	beq.n	800246a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10d      	bne.n	8002458 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002440:	2b00      	cmp	r3, #0
 8002442:	d031      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4798      	blx	r3
 800244c:	e02c      	b.n	80024a8 <HAL_DMA_IRQHandler+0x2a0>
 800244e:	bf00      	nop
 8002450:	20000004 	.word	0x20000004
 8002454:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d023      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
 8002468:	e01e      	b.n	80024a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10f      	bne.n	8002498 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0210 	bic.w	r2, r2, #16
 8002486:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d032      	beq.n	8002516 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d022      	beq.n	8002502 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2205      	movs	r2, #5
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	3301      	adds	r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d307      	bcc.n	80024f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f2      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x2cc>
 80024ee:	e000      	b.n	80024f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
 8002512:	e000      	b.n	8002516 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002514:	bf00      	nop
    }
  }
}
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002538:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b40      	cmp	r3, #64	@ 0x40
 8002548:	d108      	bne.n	800255c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800255a:	e007      	b.n	800256c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	60da      	str	r2, [r3, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3b10      	subs	r3, #16
 8002588:	4a14      	ldr	r2, [pc, #80]	@ (80025dc <DMA_CalcBaseAndBitshift+0x64>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002592:	4a13      	ldr	r2, [pc, #76]	@ (80025e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d909      	bls.n	80025ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	1d1a      	adds	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80025b8:	e007      	b.n	80025ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	aaaaaaab 	.word	0xaaaaaaab
 80025e0:	080045a0 	.word	0x080045a0

080025e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11f      	bne.n	800263e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d856      	bhi.n	80026b2 <DMA_CheckFifoParam+0xce>
 8002604:	a201      	add	r2, pc, #4	@ (adr r2, 800260c <DMA_CheckFifoParam+0x28>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	0800261d 	.word	0x0800261d
 8002610:	0800262f 	.word	0x0800262f
 8002614:	0800261d 	.word	0x0800261d
 8002618:	080026b3 	.word	0x080026b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d046      	beq.n	80026b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262c:	e043      	b.n	80026b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002632:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002636:	d140      	bne.n	80026ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263c:	e03d      	b.n	80026ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002646:	d121      	bne.n	800268c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d837      	bhi.n	80026be <DMA_CheckFifoParam+0xda>
 800264e:	a201      	add	r2, pc, #4	@ (adr r2, 8002654 <DMA_CheckFifoParam+0x70>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	08002665 	.word	0x08002665
 8002658:	0800266b 	.word	0x0800266b
 800265c:	08002665 	.word	0x08002665
 8002660:	0800267d 	.word	0x0800267d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	e030      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d025      	beq.n	80026c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267a:	e022      	b.n	80026c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002680:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002684:	d11f      	bne.n	80026c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800268a:	e01c      	b.n	80026c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d903      	bls.n	800269a <DMA_CheckFifoParam+0xb6>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d003      	beq.n	80026a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002698:	e018      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
      break;
 800269e:	e015      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00e      	beq.n	80026ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      break;
 80026b0:	e00b      	b.n	80026ca <DMA_CheckFifoParam+0xe6>
      break;
 80026b2:	bf00      	nop
 80026b4:	e00a      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
 80026b8:	e008      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026ba:	bf00      	nop
 80026bc:	e006      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026be:	bf00      	nop
 80026c0:	e004      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026c2:	bf00      	nop
 80026c4:	e002      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;   
 80026c6:	bf00      	nop
 80026c8:	e000      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026ca:	bf00      	nop
    }
  } 
  
  return status; 
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop

080026dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	@ 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	e165      	b.n	80029c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026f8:	2201      	movs	r2, #1
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	429a      	cmp	r2, r3
 8002712:	f040 8154 	bne.w	80029be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d005      	beq.n	800272e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272a:	2b02      	cmp	r3, #2
 800272c:	d130      	bne.n	8002790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	2203      	movs	r2, #3
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 0201 	and.w	r2, r3, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b03      	cmp	r3, #3
 800279a:	d017      	beq.n	80027cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d123      	bne.n	8002820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	220f      	movs	r2, #15
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	08da      	lsrs	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3208      	adds	r2, #8
 800281a:	69b9      	ldr	r1, [r7, #24]
 800281c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0203 	and.w	r2, r3, #3
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80ae 	beq.w	80029be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b5d      	ldr	r3, [pc, #372]	@ (80029dc <HAL_GPIO_Init+0x300>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	4a5c      	ldr	r2, [pc, #368]	@ (80029dc <HAL_GPIO_Init+0x300>)
 800286c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002870:	6453      	str	r3, [r2, #68]	@ 0x44
 8002872:	4b5a      	ldr	r3, [pc, #360]	@ (80029dc <HAL_GPIO_Init+0x300>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800287e:	4a58      	ldr	r2, [pc, #352]	@ (80029e0 <HAL_GPIO_Init+0x304>)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	3302      	adds	r3, #2
 8002886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	220f      	movs	r2, #15
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4f      	ldr	r2, [pc, #316]	@ (80029e4 <HAL_GPIO_Init+0x308>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d025      	beq.n	80028f6 <HAL_GPIO_Init+0x21a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4e      	ldr	r2, [pc, #312]	@ (80029e8 <HAL_GPIO_Init+0x30c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01f      	beq.n	80028f2 <HAL_GPIO_Init+0x216>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4d      	ldr	r2, [pc, #308]	@ (80029ec <HAL_GPIO_Init+0x310>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d019      	beq.n	80028ee <HAL_GPIO_Init+0x212>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4c      	ldr	r2, [pc, #304]	@ (80029f0 <HAL_GPIO_Init+0x314>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_GPIO_Init+0x20e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4b      	ldr	r2, [pc, #300]	@ (80029f4 <HAL_GPIO_Init+0x318>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00d      	beq.n	80028e6 <HAL_GPIO_Init+0x20a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4a      	ldr	r2, [pc, #296]	@ (80029f8 <HAL_GPIO_Init+0x31c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d007      	beq.n	80028e2 <HAL_GPIO_Init+0x206>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a49      	ldr	r2, [pc, #292]	@ (80029fc <HAL_GPIO_Init+0x320>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <HAL_GPIO_Init+0x202>
 80028da:	2306      	movs	r3, #6
 80028dc:	e00c      	b.n	80028f8 <HAL_GPIO_Init+0x21c>
 80028de:	2307      	movs	r3, #7
 80028e0:	e00a      	b.n	80028f8 <HAL_GPIO_Init+0x21c>
 80028e2:	2305      	movs	r3, #5
 80028e4:	e008      	b.n	80028f8 <HAL_GPIO_Init+0x21c>
 80028e6:	2304      	movs	r3, #4
 80028e8:	e006      	b.n	80028f8 <HAL_GPIO_Init+0x21c>
 80028ea:	2303      	movs	r3, #3
 80028ec:	e004      	b.n	80028f8 <HAL_GPIO_Init+0x21c>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_Init+0x21c>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_GPIO_Init+0x21c>
 80028f6:	2300      	movs	r3, #0
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	f002 0203 	and.w	r2, r2, #3
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	4093      	lsls	r3, r2
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002908:	4935      	ldr	r1, [pc, #212]	@ (80029e0 <HAL_GPIO_Init+0x304>)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	3302      	adds	r3, #2
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002916:	4b3a      	ldr	r3, [pc, #232]	@ (8002a00 <HAL_GPIO_Init+0x324>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800293a:	4a31      	ldr	r2, [pc, #196]	@ (8002a00 <HAL_GPIO_Init+0x324>)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002940:	4b2f      	ldr	r3, [pc, #188]	@ (8002a00 <HAL_GPIO_Init+0x324>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002964:	4a26      	ldr	r2, [pc, #152]	@ (8002a00 <HAL_GPIO_Init+0x324>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800296a:	4b25      	ldr	r3, [pc, #148]	@ (8002a00 <HAL_GPIO_Init+0x324>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800298e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a00 <HAL_GPIO_Init+0x324>)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002994:	4b1a      	ldr	r3, [pc, #104]	@ (8002a00 <HAL_GPIO_Init+0x324>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b8:	4a11      	ldr	r2, [pc, #68]	@ (8002a00 <HAL_GPIO_Init+0x324>)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3301      	adds	r3, #1
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b0f      	cmp	r3, #15
 80029c8:	f67f ae96 	bls.w	80026f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3724      	adds	r7, #36	@ 0x24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40013800 	.word	0x40013800
 80029e4:	40020000 	.word	0x40020000
 80029e8:	40020400 	.word	0x40020400
 80029ec:	40020800 	.word	0x40020800
 80029f0:	40020c00 	.word	0x40020c00
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40021400 	.word	0x40021400
 80029fc:	40021800 	.word	0x40021800
 8002a00:	40013c00 	.word	0x40013c00

08002a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	e001      	b.n	8002a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a50:	e003      	b.n	8002a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	041a      	lsls	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	619a      	str	r2, [r3, #24]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	041a      	lsls	r2, r3, #16
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	887b      	ldrh	r3, [r7, #2]
 8002a86:	400b      	ands	r3, r1
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0cc      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b68      	ldr	r3, [pc, #416]	@ (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d90c      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b65      	ldr	r3, [pc, #404]	@ (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b63      	ldr	r3, [pc, #396]	@ (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b8      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af0:	4b59      	ldr	r3, [pc, #356]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a58      	ldr	r2, [pc, #352]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b08:	4b53      	ldr	r3, [pc, #332]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b50      	ldr	r3, [pc, #320]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	494d      	ldr	r1, [pc, #308]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d044      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b47      	ldr	r3, [pc, #284]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d119      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e06f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e067      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7a:	4b37      	ldr	r3, [pc, #220]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f023 0203 	bic.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4934      	ldr	r1, [pc, #208]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fafe 	bl	800118c <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b94:	f7fe fafa 	bl	800118c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e04f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	4b2b      	ldr	r3, [pc, #172]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 020c 	and.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d1eb      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b25      	ldr	r3, [pc, #148]	@ (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d20c      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b22      	ldr	r3, [pc, #136]	@ (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b20      	ldr	r3, [pc, #128]	@ (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e032      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf0:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4916      	ldr	r1, [pc, #88]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0e:	4b12      	ldr	r3, [pc, #72]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	490e      	ldr	r1, [pc, #56]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c22:	f000 f855 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	490a      	ldr	r1, [pc, #40]	@ (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	5ccb      	ldrb	r3, [r1, r3]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	4a09      	ldr	r2, [pc, #36]	@ (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c3e:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fa5e 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023c00 	.word	0x40023c00
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08004588 	.word	0x08004588
 8002c60:	20000004 	.word	0x20000004
 8002c64:	20000008 	.word	0x20000008

08002c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c6c:	4b03      	ldr	r3, [pc, #12]	@ (8002c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000004 	.word	0x20000004

08002c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c84:	f7ff fff0 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	0a9b      	lsrs	r3, r3, #10
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	4903      	ldr	r1, [pc, #12]	@ (8002ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	08004598 	.word	0x08004598

08002ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cac:	f7ff ffdc 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	0b5b      	lsrs	r3, r3, #13
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4903      	ldr	r1, [pc, #12]	@ (8002ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08004598 	.word	0x08004598

08002cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd4:	b0ae      	sub	sp, #184	@ 0xb8
 8002cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf6:	4bcb      	ldr	r3, [pc, #812]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	f200 8206 	bhi.w	8003110 <HAL_RCC_GetSysClockFreq+0x440>
 8002d04:	a201      	add	r2, pc, #4	@ (adr r2, 8002d0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d41 	.word	0x08002d41
 8002d10:	08003111 	.word	0x08003111
 8002d14:	08003111 	.word	0x08003111
 8002d18:	08003111 	.word	0x08003111
 8002d1c:	08002d49 	.word	0x08002d49
 8002d20:	08003111 	.word	0x08003111
 8002d24:	08003111 	.word	0x08003111
 8002d28:	08003111 	.word	0x08003111
 8002d2c:	08002d51 	.word	0x08002d51
 8002d30:	08003111 	.word	0x08003111
 8002d34:	08003111 	.word	0x08003111
 8002d38:	08003111 	.word	0x08003111
 8002d3c:	08002f41 	.word	0x08002f41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4bb9      	ldr	r3, [pc, #740]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d46:	e1e7      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d48:	4bb8      	ldr	r3, [pc, #736]	@ (800302c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d4e:	e1e3      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d50:	4bb4      	ldr	r3, [pc, #720]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d5c:	4bb1      	ldr	r3, [pc, #708]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d071      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d68:	4bae      	ldr	r3, [pc, #696]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	099b      	lsrs	r3, r3, #6
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d74:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d8e:	4622      	mov	r2, r4
 8002d90:	462b      	mov	r3, r5
 8002d92:	f04f 0000 	mov.w	r0, #0
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	0159      	lsls	r1, r3, #5
 8002d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da0:	0150      	lsls	r0, r2, #5
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4621      	mov	r1, r4
 8002da8:	1a51      	subs	r1, r2, r1
 8002daa:	6439      	str	r1, [r7, #64]	@ 0x40
 8002dac:	4629      	mov	r1, r5
 8002dae:	eb63 0301 	sbc.w	r3, r3, r1
 8002db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002dc0:	4649      	mov	r1, r9
 8002dc2:	018b      	lsls	r3, r1, #6
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dca:	4641      	mov	r1, r8
 8002dcc:	018a      	lsls	r2, r1, #6
 8002dce:	4641      	mov	r1, r8
 8002dd0:	1a51      	subs	r1, r2, r1
 8002dd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002de8:	4649      	mov	r1, r9
 8002dea:	00cb      	lsls	r3, r1, #3
 8002dec:	4641      	mov	r1, r8
 8002dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002df2:	4641      	mov	r1, r8
 8002df4:	00ca      	lsls	r2, r1, #3
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4622      	mov	r2, r4
 8002dfe:	189b      	adds	r3, r3, r2
 8002e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e02:	462b      	mov	r3, r5
 8002e04:	460a      	mov	r2, r1
 8002e06:	eb42 0303 	adc.w	r3, r2, r3
 8002e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e18:	4629      	mov	r1, r5
 8002e1a:	024b      	lsls	r3, r1, #9
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e22:	4621      	mov	r1, r4
 8002e24:	024a      	lsls	r2, r1, #9
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002e3c:	f7fd f9e2 	bl	8000204 <__aeabi_uldivmod>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4613      	mov	r3, r2
 8002e46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e4a:	e067      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e4c:	4b75      	ldr	r3, [pc, #468]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	099b      	lsrs	r3, r3, #6
 8002e52:	2200      	movs	r2, #0
 8002e54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e58:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e66:	2300      	movs	r3, #0
 8002e68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002e6e:	4622      	mov	r2, r4
 8002e70:	462b      	mov	r3, r5
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	0159      	lsls	r1, r3, #5
 8002e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e80:	0150      	lsls	r0, r2, #5
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4621      	mov	r1, r4
 8002e88:	1a51      	subs	r1, r2, r1
 8002e8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	018b      	lsls	r3, r1, #6
 8002ea4:	4641      	mov	r1, r8
 8002ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eaa:	4641      	mov	r1, r8
 8002eac:	018a      	lsls	r2, r1, #6
 8002eae:	4641      	mov	r1, r8
 8002eb0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ec6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ece:	4692      	mov	sl, r2
 8002ed0:	469b      	mov	fp, r3
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	eb1a 0303 	adds.w	r3, sl, r3
 8002ed8:	623b      	str	r3, [r7, #32]
 8002eda:	462b      	mov	r3, r5
 8002edc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002eee:	4629      	mov	r1, r5
 8002ef0:	028b      	lsls	r3, r1, #10
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef8:	4621      	mov	r1, r4
 8002efa:	028a      	lsls	r2, r1, #10
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f04:	2200      	movs	r2, #0
 8002f06:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f08:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002f0e:	f7fd f979 	bl	8000204 <__aeabi_uldivmod>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4613      	mov	r3, r2
 8002f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f1c:	4b41      	ldr	r3, [pc, #260]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	3301      	adds	r3, #1
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f3e:	e0eb      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f40:	4b38      	ldr	r3, [pc, #224]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f4c:	4b35      	ldr	r3, [pc, #212]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d06b      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f58:	4b32      	ldr	r3, [pc, #200]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	099b      	lsrs	r3, r3, #6
 8002f5e:	2200      	movs	r2, #0
 8002f60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f74:	4622      	mov	r2, r4
 8002f76:	462b      	mov	r3, r5
 8002f78:	f04f 0000 	mov.w	r0, #0
 8002f7c:	f04f 0100 	mov.w	r1, #0
 8002f80:	0159      	lsls	r1, r3, #5
 8002f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f86:	0150      	lsls	r0, r2, #5
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	1a51      	subs	r1, r2, r1
 8002f90:	61b9      	str	r1, [r7, #24]
 8002f92:	4629      	mov	r1, r5
 8002f94:	eb63 0301 	sbc.w	r3, r3, r1
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fa6:	4659      	mov	r1, fp
 8002fa8:	018b      	lsls	r3, r1, #6
 8002faa:	4651      	mov	r1, sl
 8002fac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fb0:	4651      	mov	r1, sl
 8002fb2:	018a      	lsls	r2, r1, #6
 8002fb4:	4651      	mov	r1, sl
 8002fb6:	ebb2 0801 	subs.w	r8, r2, r1
 8002fba:	4659      	mov	r1, fp
 8002fbc:	eb63 0901 	sbc.w	r9, r3, r1
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fcc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd4:	4690      	mov	r8, r2
 8002fd6:	4699      	mov	r9, r3
 8002fd8:	4623      	mov	r3, r4
 8002fda:	eb18 0303 	adds.w	r3, r8, r3
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	462b      	mov	r3, r5
 8002fe2:	eb49 0303 	adc.w	r3, r9, r3
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	024b      	lsls	r3, r1, #9
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ffe:	4621      	mov	r1, r4
 8003000:	024a      	lsls	r2, r1, #9
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800300a:	2200      	movs	r2, #0
 800300c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800300e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003010:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003014:	f7fd f8f6 	bl	8000204 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003022:	e065      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x420>
 8003024:	40023800 	.word	0x40023800
 8003028:	00f42400 	.word	0x00f42400
 800302c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003030:	4b3d      	ldr	r3, [pc, #244]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x458>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	2200      	movs	r2, #0
 8003038:	4618      	mov	r0, r3
 800303a:	4611      	mov	r1, r2
 800303c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003040:	653b      	str	r3, [r7, #80]	@ 0x50
 8003042:	2300      	movs	r3, #0
 8003044:	657b      	str	r3, [r7, #84]	@ 0x54
 8003046:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800304a:	4642      	mov	r2, r8
 800304c:	464b      	mov	r3, r9
 800304e:	f04f 0000 	mov.w	r0, #0
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	0159      	lsls	r1, r3, #5
 8003058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800305c:	0150      	lsls	r0, r2, #5
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4641      	mov	r1, r8
 8003064:	1a51      	subs	r1, r2, r1
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	4649      	mov	r1, r9
 800306a:	eb63 0301 	sbc.w	r3, r3, r1
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800307c:	4659      	mov	r1, fp
 800307e:	018b      	lsls	r3, r1, #6
 8003080:	4651      	mov	r1, sl
 8003082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003086:	4651      	mov	r1, sl
 8003088:	018a      	lsls	r2, r1, #6
 800308a:	4651      	mov	r1, sl
 800308c:	1a54      	subs	r4, r2, r1
 800308e:	4659      	mov	r1, fp
 8003090:	eb63 0501 	sbc.w	r5, r3, r1
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	00eb      	lsls	r3, r5, #3
 800309e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030a2:	00e2      	lsls	r2, r4, #3
 80030a4:	4614      	mov	r4, r2
 80030a6:	461d      	mov	r5, r3
 80030a8:	4643      	mov	r3, r8
 80030aa:	18e3      	adds	r3, r4, r3
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	464b      	mov	r3, r9
 80030b0:	eb45 0303 	adc.w	r3, r5, r3
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030c2:	4629      	mov	r1, r5
 80030c4:	028b      	lsls	r3, r1, #10
 80030c6:	4621      	mov	r1, r4
 80030c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030cc:	4621      	mov	r1, r4
 80030ce:	028a      	lsls	r2, r1, #10
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030d8:	2200      	movs	r2, #0
 80030da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030e2:	f7fd f88f 	bl	8000204 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4613      	mov	r3, r2
 80030ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x458>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	0f1b      	lsrs	r3, r3, #28
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80030fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800310e:	e003      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b06      	ldr	r3, [pc, #24]	@ (800312c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003116:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003118:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800311c:	4618      	mov	r0, r3
 800311e:	37b8      	adds	r7, #184	@ 0xb8
 8003120:	46bd      	mov	sp, r7
 8003122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800
 800312c:	00f42400 	.word	0x00f42400

08003130 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e28d      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 8083 	beq.w	8003256 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003150:	4b94      	ldr	r3, [pc, #592]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b04      	cmp	r3, #4
 800315a:	d019      	beq.n	8003190 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800315c:	4b91      	ldr	r3, [pc, #580]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 030c 	and.w	r3, r3, #12
        || \
 8003164:	2b08      	cmp	r3, #8
 8003166:	d106      	bne.n	8003176 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003168:	4b8e      	ldr	r3, [pc, #568]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003170:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003174:	d00c      	beq.n	8003190 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003176:	4b8b      	ldr	r3, [pc, #556]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800317e:	2b0c      	cmp	r3, #12
 8003180:	d112      	bne.n	80031a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003182:	4b88      	ldr	r3, [pc, #544]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800318a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800318e:	d10b      	bne.n	80031a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	4b84      	ldr	r3, [pc, #528]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d05b      	beq.n	8003254 <HAL_RCC_OscConfig+0x124>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d157      	bne.n	8003254 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e25a      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d106      	bne.n	80031c0 <HAL_RCC_OscConfig+0x90>
 80031b2:	4b7c      	ldr	r3, [pc, #496]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7b      	ldr	r2, [pc, #492]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e01d      	b.n	80031fc <HAL_RCC_OscConfig+0xcc>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0xb4>
 80031ca:	4b76      	ldr	r3, [pc, #472]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a75      	ldr	r2, [pc, #468]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80031d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b73      	ldr	r3, [pc, #460]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a72      	ldr	r2, [pc, #456]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e00b      	b.n	80031fc <HAL_RCC_OscConfig+0xcc>
 80031e4:	4b6f      	ldr	r3, [pc, #444]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a6e      	ldr	r2, [pc, #440]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80031ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b6c      	ldr	r3, [pc, #432]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a6b      	ldr	r2, [pc, #428]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80031f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d013      	beq.n	800322c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fd ffc2 	bl	800118c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7fd ffbe 	bl	800118c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	@ 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e21f      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	4b61      	ldr	r3, [pc, #388]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0xdc>
 800322a:	e014      	b.n	8003256 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fd ffae 	bl	800118c <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003234:	f7fd ffaa 	bl	800118c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	@ 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e20b      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	4b57      	ldr	r3, [pc, #348]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x104>
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d06f      	beq.n	8003342 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003262:	4b50      	ldr	r3, [pc, #320]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b00      	cmp	r3, #0
 800326c:	d017      	beq.n	800329e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800326e:	4b4d      	ldr	r3, [pc, #308]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
        || \
 8003276:	2b08      	cmp	r3, #8
 8003278:	d105      	bne.n	8003286 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800327a:	4b4a      	ldr	r3, [pc, #296]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003286:	4b47      	ldr	r3, [pc, #284]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d11c      	bne.n	80032cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003292:	4b44      	ldr	r3, [pc, #272]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d116      	bne.n	80032cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	4b41      	ldr	r3, [pc, #260]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_RCC_OscConfig+0x186>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e1d3      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b6:	4b3b      	ldr	r3, [pc, #236]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4937      	ldr	r1, [pc, #220]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	e03a      	b.n	8003342 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d4:	4b34      	ldr	r3, [pc, #208]	@ (80033a8 <HAL_RCC_OscConfig+0x278>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fd ff57 	bl	800118c <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fd ff53 	bl	800118c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1b4      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	4b2b      	ldr	r3, [pc, #172]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003300:	4b28      	ldr	r3, [pc, #160]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4925      	ldr	r1, [pc, #148]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]
 8003314:	e015      	b.n	8003342 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003316:	4b24      	ldr	r3, [pc, #144]	@ (80033a8 <HAL_RCC_OscConfig+0x278>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fd ff36 	bl	800118c <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003324:	f7fd ff32 	bl	800118c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e193      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d036      	beq.n	80033bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003356:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <HAL_RCC_OscConfig+0x27c>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fd ff16 	bl	800118c <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003364:	f7fd ff12 	bl	800118c <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e173      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x234>
 8003382:	e01b      	b.n	80033bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003384:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <HAL_RCC_OscConfig+0x27c>)
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338a:	f7fd feff 	bl	800118c <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	e00e      	b.n	80033b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003392:	f7fd fefb 	bl	800118c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d907      	bls.n	80033b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e15c      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
 80033a4:	40023800 	.word	0x40023800
 80033a8:	42470000 	.word	0x42470000
 80033ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b0:	4b8a      	ldr	r3, [pc, #552]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 80033b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ea      	bne.n	8003392 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8097 	beq.w	80034f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ce:	4b83      	ldr	r3, [pc, #524]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10f      	bne.n	80033fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	4b7f      	ldr	r3, [pc, #508]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	4a7e      	ldr	r2, [pc, #504]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ea:	4b7c      	ldr	r3, [pc, #496]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fa:	4b79      	ldr	r3, [pc, #484]	@ (80035e0 <HAL_RCC_OscConfig+0x4b0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003402:	2b00      	cmp	r3, #0
 8003404:	d118      	bne.n	8003438 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003406:	4b76      	ldr	r3, [pc, #472]	@ (80035e0 <HAL_RCC_OscConfig+0x4b0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a75      	ldr	r2, [pc, #468]	@ (80035e0 <HAL_RCC_OscConfig+0x4b0>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003412:	f7fd febb 	bl	800118c <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341a:	f7fd feb7 	bl	800118c <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e118      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	4b6c      	ldr	r3, [pc, #432]	@ (80035e0 <HAL_RCC_OscConfig+0x4b0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d106      	bne.n	800344e <HAL_RCC_OscConfig+0x31e>
 8003440:	4b66      	ldr	r3, [pc, #408]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003444:	4a65      	ldr	r2, [pc, #404]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6713      	str	r3, [r2, #112]	@ 0x70
 800344c:	e01c      	b.n	8003488 <HAL_RCC_OscConfig+0x358>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b05      	cmp	r3, #5
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x340>
 8003456:	4b61      	ldr	r3, [pc, #388]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345a:	4a60      	ldr	r2, [pc, #384]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6713      	str	r3, [r2, #112]	@ 0x70
 8003462:	4b5e      	ldr	r3, [pc, #376]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003466:	4a5d      	ldr	r2, [pc, #372]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6713      	str	r3, [r2, #112]	@ 0x70
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0x358>
 8003470:	4b5a      	ldr	r3, [pc, #360]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003474:	4a59      	ldr	r2, [pc, #356]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	6713      	str	r3, [r2, #112]	@ 0x70
 800347c:	4b57      	ldr	r3, [pc, #348]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003480:	4a56      	ldr	r2, [pc, #344]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003482:	f023 0304 	bic.w	r3, r3, #4
 8003486:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fd fe7c 	bl	800118c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fd fe78 	bl	800118c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0d7      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ae:	4b4b      	ldr	r3, [pc, #300]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0ee      	beq.n	8003498 <HAL_RCC_OscConfig+0x368>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fd fe66 	bl	800118c <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c2:	e00a      	b.n	80034da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7fd fe62 	bl	800118c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e0c1      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034da:	4b40      	ldr	r3, [pc, #256]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1ee      	bne.n	80034c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ec:	4b3b      	ldr	r3, [pc, #236]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	4a3a      	ldr	r2, [pc, #232]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 80034f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80ad 	beq.w	800365c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003502:	4b36      	ldr	r3, [pc, #216]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b08      	cmp	r3, #8
 800350c:	d060      	beq.n	80035d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d145      	bne.n	80035a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	4b33      	ldr	r3, [pc, #204]	@ (80035e4 <HAL_RCC_OscConfig+0x4b4>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fd fe36 	bl	800118c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003524:	f7fd fe32 	bl	800118c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e093      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	4b29      	ldr	r3, [pc, #164]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	085b      	lsrs	r3, r3, #1
 800355a:	3b01      	subs	r3, #1
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003564:	061b      	lsls	r3, r3, #24
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	071b      	lsls	r3, r3, #28
 800356e:	491b      	ldr	r1, [pc, #108]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003574:	4b1b      	ldr	r3, [pc, #108]	@ (80035e4 <HAL_RCC_OscConfig+0x4b4>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fd fe07 	bl	800118c <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003582:	f7fd fe03 	bl	800118c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e064      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003594:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x452>
 80035a0:	e05c      	b.n	800365c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	4b10      	ldr	r3, [pc, #64]	@ (80035e4 <HAL_RCC_OscConfig+0x4b4>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fd fdf0 	bl	800118c <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fd fdec 	bl	800118c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e04d      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x480>
 80035ce:	e045      	b.n	800365c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e040      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40007000 	.word	0x40007000
 80035e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003668 <HAL_RCC_OscConfig+0x538>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d030      	beq.n	8003658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d129      	bne.n	8003658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d122      	bne.n	8003658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003618:	4013      	ands	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800361e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003620:	4293      	cmp	r3, r2
 8003622:	d119      	bne.n	8003658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	085b      	lsrs	r3, r3, #1
 8003630:	3b01      	subs	r3, #1
 8003632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d10f      	bne.n	8003658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d107      	bne.n	8003658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800

0800366c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e07b      	b.n	8003776 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800368e:	d009      	beq.n	80036a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
 8003696:	e005      	b.n	80036a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd fad8 	bl	8000c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003728:	ea42 0103 	orr.w	r1, r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	0c1b      	lsrs	r3, r3, #16
 8003742:	f003 0104 	and.w	r1, r3, #4
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	f003 0210 	and.w	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003764:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d001      	beq.n	800379e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	e097      	b.n	80038ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_SPI_Transmit_DMA+0x2a>
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e08f      	b.n	80038ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_SPI_Transmit_DMA+0x3c>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e088      	b.n	80038ce <HAL_SPI_Transmit_DMA+0x14e>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2203      	movs	r2, #3
 80037c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800380a:	d10f      	bne.n	800382c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800381a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800382a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003830:	4a29      	ldr	r2, [pc, #164]	@ (80038d8 <HAL_SPI_Transmit_DMA+0x158>)
 8003832:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003838:	4a28      	ldr	r2, [pc, #160]	@ (80038dc <HAL_SPI_Transmit_DMA+0x15c>)
 800383a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003840:	4a27      	ldr	r2, [pc, #156]	@ (80038e0 <HAL_SPI_Transmit_DMA+0x160>)
 8003842:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003848:	2200      	movs	r2, #0
 800384a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	4619      	mov	r1, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003862:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003864:	f7fe fc78 	bl	8002158 <HAL_DMA_Start_IT>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003872:	f043 0210 	orr.w	r2, r3, #16
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e023      	b.n	80038ce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003890:	2b40      	cmp	r3, #64	@ 0x40
 8003892:	d007      	beq.n	80038a4 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038a2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0220 	orr.w	r2, r2, #32
 80038ba:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0202 	orr.w	r2, r2, #2
 80038ca:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	080039c9 	.word	0x080039c9
 80038dc:	08003921 	.word	0x08003921
 80038e0:	080039e5 	.word	0x080039e5

080038e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800392e:	f7fd fc2d 	bl	800118c <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003942:	d03b      	beq.n	80039bc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0220 	bic.w	r2, r2, #32
 8003952:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0202 	bic.w	r2, r2, #2
 8003962:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	2164      	movs	r1, #100	@ 0x64
 8003968:	6978      	ldr	r0, [r7, #20]
 800396a:	f000 f8e3 	bl	8003b34 <SPI_EndRxTxTransaction>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80039b4:	6978      	ldr	r0, [r7, #20]
 80039b6:	f7ff ffa9 	bl	800390c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80039ba:	e002      	b.n	80039c2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80039bc:	6978      	ldr	r0, [r7, #20]
 80039be:	f7ff ff91 	bl	80038e4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff ff8e 	bl	80038f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0203 	bic.w	r2, r2, #3
 8003a00:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a06:	f043 0210 	orr.w	r2, r3, #16
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7ff ff78 	bl	800390c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a34:	f7fd fbaa 	bl	800118c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	4413      	add	r3, r2
 8003a42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a44:	f7fd fba2 	bl	800118c <HAL_GetTick>
 8003a48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a4a:	4b39      	ldr	r3, [pc, #228]	@ (8003b30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	015b      	lsls	r3, r3, #5
 8003a50:	0d1b      	lsrs	r3, r3, #20
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	fb02 f303 	mul.w	r3, r2, r3
 8003a58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a5a:	e055      	b.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a62:	d051      	beq.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a64:	f7fd fb92 	bl	800118c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d902      	bls.n	8003a7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d13d      	bne.n	8003af6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a92:	d111      	bne.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a9c:	d004      	beq.n	8003aa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa6:	d107      	bne.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac0:	d10f      	bne.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ae0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e018      	b.n	8003b28 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e002      	b.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d19a      	bne.n	8003a5c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000004 	.word	0x20000004

08003b34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2201      	movs	r2, #1
 8003b48:	2102      	movs	r1, #2
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff ff6a 	bl	8003a24 <SPI_WaitFlagStateUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e032      	b.n	8003bcc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b66:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <SPI_EndRxTxTransaction+0xa0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd8 <SPI_EndRxTxTransaction+0xa4>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	0d5b      	lsrs	r3, r3, #21
 8003b72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b84:	d112      	bne.n	8003bac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2180      	movs	r1, #128	@ 0x80
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff ff47 	bl	8003a24 <SPI_WaitFlagStateUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d016      	beq.n	8003bca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e00f      	b.n	8003bcc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b80      	cmp	r3, #128	@ 0x80
 8003bc4:	d0f2      	beq.n	8003bac <SPI_EndRxTxTransaction+0x78>
 8003bc6:	e000      	b.n	8003bca <SPI_EndRxTxTransaction+0x96>
        break;
 8003bc8:	bf00      	nop
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000004 	.word	0x20000004
 8003bd8:	165e9f81 	.word	0x165e9f81

08003bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e041      	b.n	8003c72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd f99e 	bl	8000f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 f896 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d001      	beq.n	8003c94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e046      	b.n	8003d22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a23      	ldr	r2, [pc, #140]	@ (8003d30 <HAL_TIM_Base_Start+0xb4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d022      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cae:	d01d      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d34 <HAL_TIM_Base_Start+0xb8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d018      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8003d38 <HAL_TIM_Base_Start+0xbc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d3c <HAL_TIM_Base_Start+0xc0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d40 <HAL_TIM_Base_Start+0xc4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a19      	ldr	r2, [pc, #100]	@ (8003d44 <HAL_TIM_Base_Start+0xc8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_TIM_Base_Start+0x70>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a18      	ldr	r2, [pc, #96]	@ (8003d48 <HAL_TIM_Base_Start+0xcc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d111      	bne.n	8003d10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d010      	beq.n	8003d20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0e:	e007      	b.n	8003d20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	40010400 	.word	0x40010400
 8003d44:	40014000 	.word	0x40014000
 8003d48:	40001800 	.word	0x40001800

08003d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a43      	ldr	r2, [pc, #268]	@ (8003e6c <TIM_Base_SetConfig+0x120>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d013      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d6a:	d00f      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a40      	ldr	r2, [pc, #256]	@ (8003e70 <TIM_Base_SetConfig+0x124>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3f      	ldr	r2, [pc, #252]	@ (8003e74 <TIM_Base_SetConfig+0x128>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e78 <TIM_Base_SetConfig+0x12c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3d      	ldr	r2, [pc, #244]	@ (8003e7c <TIM_Base_SetConfig+0x130>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a32      	ldr	r2, [pc, #200]	@ (8003e6c <TIM_Base_SetConfig+0x120>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dac:	d027      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2f      	ldr	r2, [pc, #188]	@ (8003e70 <TIM_Base_SetConfig+0x124>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d023      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2e      	ldr	r2, [pc, #184]	@ (8003e74 <TIM_Base_SetConfig+0x128>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e78 <TIM_Base_SetConfig+0x12c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e7c <TIM_Base_SetConfig+0x130>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d017      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e80 <TIM_Base_SetConfig+0x134>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e84 <TIM_Base_SetConfig+0x138>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a29      	ldr	r2, [pc, #164]	@ (8003e88 <TIM_Base_SetConfig+0x13c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a28      	ldr	r2, [pc, #160]	@ (8003e8c <TIM_Base_SetConfig+0x140>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a27      	ldr	r2, [pc, #156]	@ (8003e90 <TIM_Base_SetConfig+0x144>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a26      	ldr	r2, [pc, #152]	@ (8003e94 <TIM_Base_SetConfig+0x148>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a0e      	ldr	r2, [pc, #56]	@ (8003e6c <TIM_Base_SetConfig+0x120>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d003      	beq.n	8003e3e <TIM_Base_SetConfig+0xf2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a10      	ldr	r2, [pc, #64]	@ (8003e7c <TIM_Base_SetConfig+0x130>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d103      	bne.n	8003e46 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f043 0204 	orr.w	r2, r3, #4
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40010400 	.word	0x40010400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800
 8003e8c:	40001800 	.word	0x40001800
 8003e90:	40001c00 	.word	0x40001c00
 8003e94:	40002000 	.word	0x40002000

08003e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e05a      	b.n	8003f66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a21      	ldr	r2, [pc, #132]	@ (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003efc:	d01d      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1d      	ldr	r2, [pc, #116]	@ (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1a      	ldr	r2, [pc, #104]	@ (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a18      	ldr	r2, [pc, #96]	@ (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a17      	ldr	r2, [pc, #92]	@ (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a15      	ldr	r2, [pc, #84]	@ (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10c      	bne.n	8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40010400 	.word	0x40010400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40001800 	.word	0x40001800

08003f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e042      	b.n	8004028 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd f810 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	@ 0x24
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f82b 	bl	8004030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004034:	b0c0      	sub	sp, #256	@ 0x100
 8004036:	af00      	add	r7, sp, #0
 8004038:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404c:	68d9      	ldr	r1, [r3, #12]
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	ea40 0301 	orr.w	r3, r0, r1
 8004058:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	431a      	orrs	r2, r3
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	431a      	orrs	r2, r3
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004088:	f021 010c 	bic.w	r1, r1, #12
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004096:	430b      	orrs	r3, r1
 8004098:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800409a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040aa:	6999      	ldr	r1, [r3, #24]
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	ea40 0301 	orr.w	r3, r0, r1
 80040b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b8f      	ldr	r3, [pc, #572]	@ (80042fc <UART_SetConfig+0x2cc>)
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d005      	beq.n	80040d0 <UART_SetConfig+0xa0>
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004300 <UART_SetConfig+0x2d0>)
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d104      	bne.n	80040da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040d0:	f7fe fdea 	bl	8002ca8 <HAL_RCC_GetPCLK2Freq>
 80040d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040d8:	e003      	b.n	80040e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040da:	f7fe fdd1 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 80040de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ec:	f040 810c 	bne.w	8004308 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f4:	2200      	movs	r2, #0
 80040f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004102:	4622      	mov	r2, r4
 8004104:	462b      	mov	r3, r5
 8004106:	1891      	adds	r1, r2, r2
 8004108:	65b9      	str	r1, [r7, #88]	@ 0x58
 800410a:	415b      	adcs	r3, r3
 800410c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800410e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004112:	4621      	mov	r1, r4
 8004114:	eb12 0801 	adds.w	r8, r2, r1
 8004118:	4629      	mov	r1, r5
 800411a:	eb43 0901 	adc.w	r9, r3, r1
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800412a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800412e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004132:	4690      	mov	r8, r2
 8004134:	4699      	mov	r9, r3
 8004136:	4623      	mov	r3, r4
 8004138:	eb18 0303 	adds.w	r3, r8, r3
 800413c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004140:	462b      	mov	r3, r5
 8004142:	eb49 0303 	adc.w	r3, r9, r3
 8004146:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004156:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800415a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800415e:	460b      	mov	r3, r1
 8004160:	18db      	adds	r3, r3, r3
 8004162:	653b      	str	r3, [r7, #80]	@ 0x50
 8004164:	4613      	mov	r3, r2
 8004166:	eb42 0303 	adc.w	r3, r2, r3
 800416a:	657b      	str	r3, [r7, #84]	@ 0x54
 800416c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004170:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004174:	f7fc f846 	bl	8000204 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4b61      	ldr	r3, [pc, #388]	@ (8004304 <UART_SetConfig+0x2d4>)
 800417e:	fba3 2302 	umull	r2, r3, r3, r2
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	011c      	lsls	r4, r3, #4
 8004186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800418a:	2200      	movs	r2, #0
 800418c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004190:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004194:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004198:	4642      	mov	r2, r8
 800419a:	464b      	mov	r3, r9
 800419c:	1891      	adds	r1, r2, r2
 800419e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041a0:	415b      	adcs	r3, r3
 80041a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041a8:	4641      	mov	r1, r8
 80041aa:	eb12 0a01 	adds.w	sl, r2, r1
 80041ae:	4649      	mov	r1, r9
 80041b0:	eb43 0b01 	adc.w	fp, r3, r1
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c8:	4692      	mov	sl, r2
 80041ca:	469b      	mov	fp, r3
 80041cc:	4643      	mov	r3, r8
 80041ce:	eb1a 0303 	adds.w	r3, sl, r3
 80041d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041d6:	464b      	mov	r3, r9
 80041d8:	eb4b 0303 	adc.w	r3, fp, r3
 80041dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041f4:	460b      	mov	r3, r1
 80041f6:	18db      	adds	r3, r3, r3
 80041f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80041fa:	4613      	mov	r3, r2
 80041fc:	eb42 0303 	adc.w	r3, r2, r3
 8004200:	647b      	str	r3, [r7, #68]	@ 0x44
 8004202:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004206:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800420a:	f7fb fffb 	bl	8000204 <__aeabi_uldivmod>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4611      	mov	r1, r2
 8004214:	4b3b      	ldr	r3, [pc, #236]	@ (8004304 <UART_SetConfig+0x2d4>)
 8004216:	fba3 2301 	umull	r2, r3, r3, r1
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	2264      	movs	r2, #100	@ 0x64
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	1acb      	subs	r3, r1, r3
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800422a:	4b36      	ldr	r3, [pc, #216]	@ (8004304 <UART_SetConfig+0x2d4>)
 800422c:	fba3 2302 	umull	r2, r3, r3, r2
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004238:	441c      	add	r4, r3
 800423a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800423e:	2200      	movs	r2, #0
 8004240:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004244:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004248:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800424c:	4642      	mov	r2, r8
 800424e:	464b      	mov	r3, r9
 8004250:	1891      	adds	r1, r2, r2
 8004252:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004254:	415b      	adcs	r3, r3
 8004256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004258:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800425c:	4641      	mov	r1, r8
 800425e:	1851      	adds	r1, r2, r1
 8004260:	6339      	str	r1, [r7, #48]	@ 0x30
 8004262:	4649      	mov	r1, r9
 8004264:	414b      	adcs	r3, r1
 8004266:	637b      	str	r3, [r7, #52]	@ 0x34
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004274:	4659      	mov	r1, fp
 8004276:	00cb      	lsls	r3, r1, #3
 8004278:	4651      	mov	r1, sl
 800427a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427e:	4651      	mov	r1, sl
 8004280:	00ca      	lsls	r2, r1, #3
 8004282:	4610      	mov	r0, r2
 8004284:	4619      	mov	r1, r3
 8004286:	4603      	mov	r3, r0
 8004288:	4642      	mov	r2, r8
 800428a:	189b      	adds	r3, r3, r2
 800428c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004290:	464b      	mov	r3, r9
 8004292:	460a      	mov	r2, r1
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042b0:	460b      	mov	r3, r1
 80042b2:	18db      	adds	r3, r3, r3
 80042b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042b6:	4613      	mov	r3, r2
 80042b8:	eb42 0303 	adc.w	r3, r2, r3
 80042bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042c6:	f7fb ff9d 	bl	8000204 <__aeabi_uldivmod>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <UART_SetConfig+0x2d4>)
 80042d0:	fba3 1302 	umull	r1, r3, r3, r2
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	2164      	movs	r1, #100	@ 0x64
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	3332      	adds	r3, #50	@ 0x32
 80042e2:	4a08      	ldr	r2, [pc, #32]	@ (8004304 <UART_SetConfig+0x2d4>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	f003 0207 	and.w	r2, r3, #7
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4422      	add	r2, r4
 80042f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042f8:	e106      	b.n	8004508 <UART_SetConfig+0x4d8>
 80042fa:	bf00      	nop
 80042fc:	40011000 	.word	0x40011000
 8004300:	40011400 	.word	0x40011400
 8004304:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800430c:	2200      	movs	r2, #0
 800430e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004312:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004316:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800431a:	4642      	mov	r2, r8
 800431c:	464b      	mov	r3, r9
 800431e:	1891      	adds	r1, r2, r2
 8004320:	6239      	str	r1, [r7, #32]
 8004322:	415b      	adcs	r3, r3
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
 8004326:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800432a:	4641      	mov	r1, r8
 800432c:	1854      	adds	r4, r2, r1
 800432e:	4649      	mov	r1, r9
 8004330:	eb43 0501 	adc.w	r5, r3, r1
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	00eb      	lsls	r3, r5, #3
 800433e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004342:	00e2      	lsls	r2, r4, #3
 8004344:	4614      	mov	r4, r2
 8004346:	461d      	mov	r5, r3
 8004348:	4643      	mov	r3, r8
 800434a:	18e3      	adds	r3, r4, r3
 800434c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004350:	464b      	mov	r3, r9
 8004352:	eb45 0303 	adc.w	r3, r5, r3
 8004356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004366:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004376:	4629      	mov	r1, r5
 8004378:	008b      	lsls	r3, r1, #2
 800437a:	4621      	mov	r1, r4
 800437c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004380:	4621      	mov	r1, r4
 8004382:	008a      	lsls	r2, r1, #2
 8004384:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004388:	f7fb ff3c 	bl	8000204 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4b60      	ldr	r3, [pc, #384]	@ (8004514 <UART_SetConfig+0x4e4>)
 8004392:	fba3 2302 	umull	r2, r3, r3, r2
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	011c      	lsls	r4, r3, #4
 800439a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800439e:	2200      	movs	r2, #0
 80043a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043ac:	4642      	mov	r2, r8
 80043ae:	464b      	mov	r3, r9
 80043b0:	1891      	adds	r1, r2, r2
 80043b2:	61b9      	str	r1, [r7, #24]
 80043b4:	415b      	adcs	r3, r3
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043bc:	4641      	mov	r1, r8
 80043be:	1851      	adds	r1, r2, r1
 80043c0:	6139      	str	r1, [r7, #16]
 80043c2:	4649      	mov	r1, r9
 80043c4:	414b      	adcs	r3, r1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d4:	4659      	mov	r1, fp
 80043d6:	00cb      	lsls	r3, r1, #3
 80043d8:	4651      	mov	r1, sl
 80043da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043de:	4651      	mov	r1, sl
 80043e0:	00ca      	lsls	r2, r1, #3
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	4642      	mov	r2, r8
 80043ea:	189b      	adds	r3, r3, r2
 80043ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043f0:	464b      	mov	r3, r9
 80043f2:	460a      	mov	r2, r1
 80043f4:	eb42 0303 	adc.w	r3, r2, r3
 80043f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004406:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004414:	4649      	mov	r1, r9
 8004416:	008b      	lsls	r3, r1, #2
 8004418:	4641      	mov	r1, r8
 800441a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800441e:	4641      	mov	r1, r8
 8004420:	008a      	lsls	r2, r1, #2
 8004422:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004426:	f7fb feed 	bl	8000204 <__aeabi_uldivmod>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4611      	mov	r1, r2
 8004430:	4b38      	ldr	r3, [pc, #224]	@ (8004514 <UART_SetConfig+0x4e4>)
 8004432:	fba3 2301 	umull	r2, r3, r3, r1
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2264      	movs	r2, #100	@ 0x64
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	1acb      	subs	r3, r1, r3
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	3332      	adds	r3, #50	@ 0x32
 8004444:	4a33      	ldr	r2, [pc, #204]	@ (8004514 <UART_SetConfig+0x4e4>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004450:	441c      	add	r4, r3
 8004452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004456:	2200      	movs	r2, #0
 8004458:	673b      	str	r3, [r7, #112]	@ 0x70
 800445a:	677a      	str	r2, [r7, #116]	@ 0x74
 800445c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004460:	4642      	mov	r2, r8
 8004462:	464b      	mov	r3, r9
 8004464:	1891      	adds	r1, r2, r2
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	415b      	adcs	r3, r3
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004470:	4641      	mov	r1, r8
 8004472:	1851      	adds	r1, r2, r1
 8004474:	6039      	str	r1, [r7, #0]
 8004476:	4649      	mov	r1, r9
 8004478:	414b      	adcs	r3, r1
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004488:	4659      	mov	r1, fp
 800448a:	00cb      	lsls	r3, r1, #3
 800448c:	4651      	mov	r1, sl
 800448e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004492:	4651      	mov	r1, sl
 8004494:	00ca      	lsls	r2, r1, #3
 8004496:	4610      	mov	r0, r2
 8004498:	4619      	mov	r1, r3
 800449a:	4603      	mov	r3, r0
 800449c:	4642      	mov	r2, r8
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044a2:	464b      	mov	r3, r9
 80044a4:	460a      	mov	r2, r1
 80044a6:	eb42 0303 	adc.w	r3, r2, r3
 80044aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80044b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044c4:	4649      	mov	r1, r9
 80044c6:	008b      	lsls	r3, r1, #2
 80044c8:	4641      	mov	r1, r8
 80044ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ce:	4641      	mov	r1, r8
 80044d0:	008a      	lsls	r2, r1, #2
 80044d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044d6:	f7fb fe95 	bl	8000204 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <UART_SetConfig+0x4e4>)
 80044e0:	fba3 1302 	umull	r1, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	2164      	movs	r1, #100	@ 0x64
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	3332      	adds	r3, #50	@ 0x32
 80044f2:	4a08      	ldr	r2, [pc, #32]	@ (8004514 <UART_SetConfig+0x4e4>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	f003 020f 	and.w	r2, r3, #15
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4422      	add	r2, r4
 8004506:	609a      	str	r2, [r3, #8]
}
 8004508:	bf00      	nop
 800450a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800450e:	46bd      	mov	sp, r7
 8004510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004514:	51eb851f 	.word	0x51eb851f

08004518 <memset>:
 8004518:	4402      	add	r2, r0
 800451a:	4603      	mov	r3, r0
 800451c:	4293      	cmp	r3, r2
 800451e:	d100      	bne.n	8004522 <memset+0xa>
 8004520:	4770      	bx	lr
 8004522:	f803 1b01 	strb.w	r1, [r3], #1
 8004526:	e7f9      	b.n	800451c <memset+0x4>

08004528 <__libc_init_array>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4d0d      	ldr	r5, [pc, #52]	@ (8004560 <__libc_init_array+0x38>)
 800452c:	4c0d      	ldr	r4, [pc, #52]	@ (8004564 <__libc_init_array+0x3c>)
 800452e:	1b64      	subs	r4, r4, r5
 8004530:	10a4      	asrs	r4, r4, #2
 8004532:	2600      	movs	r6, #0
 8004534:	42a6      	cmp	r6, r4
 8004536:	d109      	bne.n	800454c <__libc_init_array+0x24>
 8004538:	4d0b      	ldr	r5, [pc, #44]	@ (8004568 <__libc_init_array+0x40>)
 800453a:	4c0c      	ldr	r4, [pc, #48]	@ (800456c <__libc_init_array+0x44>)
 800453c:	f000 f818 	bl	8004570 <_init>
 8004540:	1b64      	subs	r4, r4, r5
 8004542:	10a4      	asrs	r4, r4, #2
 8004544:	2600      	movs	r6, #0
 8004546:	42a6      	cmp	r6, r4
 8004548:	d105      	bne.n	8004556 <__libc_init_array+0x2e>
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004550:	4798      	blx	r3
 8004552:	3601      	adds	r6, #1
 8004554:	e7ee      	b.n	8004534 <__libc_init_array+0xc>
 8004556:	f855 3b04 	ldr.w	r3, [r5], #4
 800455a:	4798      	blx	r3
 800455c:	3601      	adds	r6, #1
 800455e:	e7f2      	b.n	8004546 <__libc_init_array+0x1e>
 8004560:	080045b0 	.word	0x080045b0
 8004564:	080045b0 	.word	0x080045b0
 8004568:	080045b0 	.word	0x080045b0
 800456c:	080045b4 	.word	0x080045b4

08004570 <_init>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr

0800457c <_fini>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr
